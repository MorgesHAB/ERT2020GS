digraph "RHLinuxSPI"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{RHLinuxSPI\n||+ RHLinuxSPI()\l+ init()\l+ transfer()\l+ spiRead()\l+ spiWrite()\l+ spiBurstRead()\l+ spiBurstWrite()\l+ attachInterrupt()\l+ detachInterrupt()\l+ begin()\l+ end()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Encapsulate a hardware SPI bus interface."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{RHGenericSPI\n|# _frequency\l# _bitOrder\l# _dataMode\l|+ RHGenericSPI()\l+ transfer()\l+ attachInterrupt()\l+ detachInterrupt()\l+ begin()\l+ end()\l+ setBitOrder()\l+ setDataMode()\l+ setFrequency()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_r_h_generic_s_p_i.html",tooltip="Base class for SPI interfaces."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{RH_RF22\n|# _interruptPin\l# _myInterruptIndex\l# _idleMode\l# _deviceType\l# _polynomial\l# _bufLen\l# _buf\l# _rxBufValid\l# _txBufSentIndex\l# _lastPreambleTime\l# _deviceForInterrupt\l# _interruptCount\l|+ RH_RF22()\l+ init()\l+ reset()\l+ statusRead()\l+ adcRead()\l+ temperatureRead()\l+ wutRead()\l+ setWutPeriod()\l+ setFrequency()\l+ setFHStepSize()\land 21 more...\l# handleInterrupt()\l# clearRxBuf()\l# clearTxBuf()\l# fillTxBuf()\l# appendTxBuf()\l# sendNextFragment()\l# readNextFragment()\l# resetFifos()\l# resetRxFifo()\l# resetTxFifo()\land 6 more...\l# isr0()\l# isr1()\l# isr2()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_r_h___r_f22.html",tooltip="Driver to send and receive unaddressed, unreliable datagrams via an RF22 and compatible radio transce..."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{RH_RF69\n|# _interruptPin\l# _myInterruptIndex\l# _idleMode\l# _deviceType\l# _power\l# _bufLen\l# _buf\l# _rxBufValid\l# _lastPreambleTime\l# _deviceForInterrupt\l# _interruptCount\l|+ RH_RF69()\l+ init()\l+ temperatureRead()\l+ setFrequency()\l+ rssiRead()\l+ setOpMode()\l+ setModeIdle()\l+ setModeRx()\l+ setModeTx()\l+ setTxPower()\land 14 more...\l# handleInterrupt()\l# readFifo()\l# isr0()\l# isr1()\l# isr2()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_r_h___r_f69.html",tooltip="Driver to send and receive unaddressed, unreliable datagrams via an RF69 and compatible radio transce..."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{RH_RF95\n||+ RH_RF95()\l+ init()\l+ printRegisters()\l+ setModemRegisters()\l+ setModemConfig()\l+ available()\l+ recv()\l+ send()\l+ setPreambleLength()\l+ maxMessageLength()\land 6 more...\l# handleInterrupt()\l# validateRxBuf()\l# clearRxBuf()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_r_h___r_f95.html",tooltip="Driver to send and receive unaddressed, unreliable datagrams via a LoRa capable radio transceiver."];
}
